@page "/users/register"
@inject Client httpClient
 @inject NavigationManager _navManager

<h3>Register new account</h3>
	<EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
		<DataAnnotationsValidator>

		</DataAnnotationsValidator>

		<ValidationSummary>

		</ValidationSummary>

		@if(string.IsNullOrEmpty(message) == false)
	{
		<div class="alert alert-danger">
			<p>@message</p>
		</div>
	}
	<div class="form-group">
			<label for="email">Email</label>
			<InputText class="form-control" @bind-Value="RegistrationModel.Email"/>
			<ValidationMessage For="@(()=> RegistrationModel.Email)"/>

		</div>

		<div class="form-group">
			<label for="email">First Name</label>
			<InputText class="form-control" @bind-Value="RegistrationModel.FirstName"/>
			<ValidationMessage For="@(()=> RegistrationModel.FirstName)"/>

		</div>

		<div class="form-group">
			<label for="email">Last Name</label>
			<InputText class="form-control" @bind-Value="RegistrationModel.LastName"/>
			<ValidationMessage For="@(()=> RegistrationModel.LastName)"/>

		</div>

		<div class="form-group">
			<label for="email">Password</label>
			<InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password"/>
			<ValidationMessage For="@(()=> RegistrationModel.Password)"/>

		</div>

		<button type="submit" class=" btn btn-primary btn-light">Register</button>

	</EditForm>

@code {
    UserDto RegistrationModel = new UserDto
		{
			Role = "User"
		};

    string message = string.Empty;
    private async Task HandleRegistration()
    {
        RegistrationModel.Role = "User";

        try{

            await httpClient.RegisterAsync(RegistrationModel);
            _navManager.NavigateTo("/user/login");

        }
        catch (ApiException ex)
        {
            if(ex.StatusCode>= 200 && ex.StatusCode <= 299)
            {
				NavigateToLogin();

            }
            message = ex.Message;
        }


        


    }
	private void NavigateToLogin() => _navManager.NavigateTo("/users/login");
}
